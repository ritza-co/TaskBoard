openapi: 3.1.0
info:
  title: TaskBoard API
  version: 1.0.0
  description: "A comprehensive API for managing Kanban tasks with integrated MCP
    (Model Context Protocol) chat functionality.\n\n## Authentication\n\nProtected
    endpoints require user identification via one of these methods:\n1. **Bearer Token**:
    `Authorization: Bearer <userId>`\n2. **Query Parameter**: `?userId=<userId>`  \n3.
    **Request Body**: Include `userId` field in JSON body\n\nThis flexible authentication
    supports both web applications and MCP integrations.\n\n## Features\n\n- User
    registration and authentication\n- CRUD operations for Kanban items (todo, doing,
    done)  \n- MCP-powered AI chat assistant integration\n- Session-based conversation
    management\n- Tool usage tracking and display"
servers:
- url: ${API_BASE_URL:-http://localhost:3000}
  description: API server (configurable via API_BASE_URL environment variable)
components:
  schemas:
    UserCredentials:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          description: Unique username for the account
          example: john_doe
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: Password for the account
          example: secure_password123
    AuthResponse:
      type: object
      required:
      - userId
      properties:
        userId:
          type: string
          description: Unique identifier for the user (used as bearer token)
          example: clh7x1234abcd5678efgh
    ItemStatus:
      type: string
      enum:
      - todo
      - doing
      - done
      description: Current status of the item in the Kanban board
    Item:
      type: object
      required:
      - id
      - userId
      - title
      - details
      - status
      - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the item
        userId:
          type: string
          description: ID of the user who owns this item
        title:
          type: string
          maxLength: 200
          description: Title of the item
        details:
          type: string
          maxLength: 1000
          description: Detailed description
        status:
          "$ref": "#/components/schemas/ItemStatus"
        createdAt:
          type: string
          format: date-time
    CreateItemRequest:
      type: object
      required:
      - title
      - details
      - status
      properties:
        title:
          type: string
          maxLength: 200
        details:
          type: string
          maxLength: 1000
        status:
          "$ref": "#/components/schemas/ItemStatus"
        userId:
          type: string
          description: User ID (optional if provided via Bearer token or query param)
    UpdateItemRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        details:
          type: string
          maxLength: 1000
        status:
          "$ref": "#/components/schemas/ItemStatus"
        userId:
          type: string
          description: User ID (optional if provided via Bearer token or query param)
    ChatRequest:
      type: object
      required:
      - message
      properties:
        message:
          type: string
          maxLength: 2000
        conversation_history:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum:
                - user
                - assistant
              content:
                type: string
              timestamp:
                type: string
                format: date-time
        session_id:
          type: string
          nullable: true
        userId:
          type: string
          description: User ID (optional if provided via Bearer token or query param)
    ChatResponse:
      type: object
      required:
      - response
      - session_id
      - user_message_count
      properties:
        response:
          type: string
        session_id:
          type: string
        user_message_count:
          type: integer
          minimum: 1
          maximum: 5
        tool_usage:
          type: object
          nullable: true
    ErrorResponse:
      type: object
      required:
      - message
      properties:
        message:
          type: string
          description: Error message
paths:
  "/api/chat":
    get:
      summary: Chat service health check
      description: Check the health status of the chat service and MCP integration
      operationId: chat_health_check
      tags:
      - Chat
      x-gram:
        name: check_chat_service_health
        description: |
          <context>
            This endpoint checks if the MCP-powered chat service is healthy and available.
            Use this to verify the chat functionality is working before attempting to send messages.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
          </prerequisites>
        responseFilterType: jq
      responses:
        '200':
          description: Chat service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  chat_service:
                    type: object
                    properties:
                      status:
                        type: string
                        example: healthy
                      service:
                        type: string
                        example: mcp-chat-microservice
              example:
                status: healthy
                chat_service:
                  status: healthy
                  service: mcp-chat-microservice
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '503':
          description: Chat service unavailable
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                status: unhealthy
                error: Chat service unavailable
    post:
      summary: Send chat message
      description: Send a message to the MCP-powered AI assistant and receive a response
        with optional tool usage
      operationId: send_chat_message
      tags:
      - Chat
      x-gram:
        name: send_chat_message
        description: |
          <context>
            This endpoint sends a message to the MCP-powered AI assistant and returns a response.
            The AI can use various tools to help with task management, deployment analysis, and other operations.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
            - Message content is required
            - Conversation history is optional but helps maintain context
          </prerequisites>
          <usage>
            - Use this to ask questions about your tasks, deployment status, or get AI assistance
            - The AI can access your task data and perform actions on your behalf
            - Session ID helps maintain conversation context across multiple messages
          </usage>
        responseFilterType: jq
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/ChatRequest"
            example:
              message: Can you help me analyze the current deployment status?
              conversation_history:
              - role: user
                content: Hello
                timestamp: '2025-07-31T20:00:00.000Z'
              - role: assistant
                content: Hi! How can I help you today?
                timestamp: '2025-07-31T20:00:05.000Z'
              session_id: 445cf28e-b95c-46d5-8af4-c327fe33149b
      responses:
        '200':
          description: Successfully processed chat message
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ChatResponse"
              example:
                response: I can help you analyze the deployment status. Let me check
                  the current system status using the available tools.
                session_id: 445cf28e-b95c-46d5-8af4-c327fe33149b
                user_message_count: 2
                tool_usage:
                  has_tools: true
                  tool_calls:
                  - function:
                      name: deployment_status_check
                      arguments: '{"environment": "production"}'
                    content:
                    - type: text
                      text: 'All services are running normally. Last deployment: 2025-07-31T18:30:00Z'
        '400':
          description: Bad request - missing message
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Message is required
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Failed to process chat request
  "/api/items":
    get:
      summary: Get user's items
      description: Retrieve all items belonging to the authenticated user, optionally
        filtered by status
      operationId: get_user_items
      tags:
      - Items
      x-gram:
        name: get_user_tasks
        description: |
          <context>
            This endpoint retrieves all Kanban tasks belonging to the authenticated user.
            Tasks can be filtered by status (todo, doing, done) to focus on specific work stages.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
          </prerequisites>
          <usage>
            - Use without status parameter to get all tasks
            - Use status=todo to get pending tasks
            - Use status=doing to get in-progress tasks  
            - Use status=done to get completed tasks
          </usage>
        responseFilterType: jq
      parameters:
      - name: status
        in: query
        description: Filter items by status
        required: false
        schema:
          "$ref": "#/components/schemas/ItemStatus"
        example: todo
      - name: userId
        in: query
        description: User ID (required for authentication)
        required: true
        schema:
          type: string
        example: clh7x1234abcd5678user
      responses:
        '200':
          description: Successfully retrieved items
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Item"
              example:
              - id: clh7x1234abcd5678efgh
                userId: clh7x1234abcd5678user
                title: Complete project documentation
                details: Write comprehensive API documentation and user guides
                status: todo
                createdAt: '2025-07-31T20:30:00.000Z'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
    post:
      summary: Create new item
      description: Create a new Kanban item for the authenticated user
      operationId: create_user_item
      tags:
      - Items
      x-gram:
        name: create_task
        description: |
          <context>
            This endpoint creates a new Kanban task for the authenticated user.
            Tasks can be created in any status (todo, doing, done) and will be associated with the user's account.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
            - Title, details, and status are required fields
          </prerequisites>
          <usage>
            - Use status=todo for new tasks that need to be started
            - Use status=doing for tasks currently in progress
            - Use status=done for completed tasks
            - Title should be concise (max 200 characters)
            - Details can include full description (max 1000 characters)
          </usage>
        responseFilterType: jq
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateItemRequest"
            example:
              title: Implement user authentication
              details: Add JWT-based authentication with refresh tokens
              status: todo
              userId: clh7x1234abcd5678user
      responses:
        '201':
          description: Item successfully created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Item"
              example:
                id: clh7x9012qrst3456uvwx
                userId: clh7x1234abcd5678user
                title: Implement user authentication
                details: Add JWT-based authentication with refresh tokens
                status: todo
                createdAt: '2025-07-31T21:45:00.000Z'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Missing title, details, or status
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
  "/api/items/{id}":
    get:
      summary: Get specific item
      description: Retrieve a specific Kanban item by ID
      operationId: get_item_by_id
      tags:
      - Items
      x-gram:
        name: get_task_by_id
        description: |
          <context>
            This endpoint retrieves a specific Kanban task by its unique ID.
            Only tasks belonging to the authenticated user can be accessed.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
            - Valid task ID must be provided in the URL path
          </prerequisites>
        responseFilterType: jq
      parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the item
        schema:
          type: string
        example: clh7x1234abcd5678efgh
      - name: userId
        in: query
        description: User ID (required for authentication)
        required: true
        schema:
          type: string
        example: clh7x1234abcd5678user
      responses:
        '200':
          description: Successfully retrieved item
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Item"
              example:
                id: clh7x1234abcd5678efgh
                userId: clh7x1234abcd5678user
                title: Complete project documentation
                details: Write comprehensive API documentation and user guides
                status: todo
                createdAt: '2025-07-31T20:30:00.000Z'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Item not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
    put:
      summary: Update item
      description: Update an existing Kanban item
      operationId: update_item
      tags:
      - Items
      x-gram:
        name: update_task
        description: |
          <context>
            This endpoint updates an existing Kanban task. You can modify the title, details, status, or any combination of these fields.
            Only tasks belonging to the authenticated user can be updated.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
            - Valid task ID must be provided in the URL path
            - At least one field (title, details, or status) should be provided for update
          </prerequisites>
          <usage>
            - Use to move tasks between columns (todo → doing → done)
            - Use to update task details as work progresses
            - Use to correct typos or add more information to existing tasks
          </usage>
        responseFilterType: jq
      parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the item
        schema:
          type: string
        example: clh7x1234abcd5678efgh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateItemRequest"
            example:
              title: Updated task title
              details: Updated task details with more information
              status: doing
              userId: clh7x1234abcd5678user
      responses:
        '200':
          description: Item successfully updated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Item"
              example:
                id: clh7x1234abcd5678efgh
                userId: clh7x1234abcd5678user
                title: Updated task title
                details: Updated task details with more information
                status: doing
                createdAt: '2025-07-31T20:30:00.000Z'
        '400':
          description: Bad request - invalid data
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Invalid status value
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Item not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
    delete:
      summary: Delete item
      description: Delete a Kanban item
      operationId: delete_item
      tags:
      - Items
      x-gram:
        name: delete_task
        description: |
          <context>
            This endpoint permanently deletes a Kanban task from the user's board.
            This action cannot be undone, so use with caution.
          </context>
          <prerequisites>
            - userId parameter is required for authentication
            - Valid task ID must be provided in the URL path
          </prerequisites>
          <usage>
            - Use to remove completed tasks that are no longer needed
            - Use to clean up duplicate or incorrect tasks
            - Consider moving tasks to 'done' status instead of deleting if you want to keep a record
          </usage>
        responseFilterType: jq
      parameters:
      - name: id
        in: path
        required: true
        description: Unique identifier of the item
        schema:
          type: string
        example: clh7x1234abcd5678efgh
      - name: userId
        in: query
        description: User ID (required for authentication)
        required: true
        schema:
          type: string
        example: clh7x1234abcd5678user
      responses:
        '204':
          description: Item successfully deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Unauthorized
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Item not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
  "/api/login":
    post:
      summary: Authenticate user
      description: Login with username and password to receive user ID token
      operationId: user_login
      tags:
      - Authentication
      security: []
      x-gram:
        name: login_user
        description: |
          <context>
            This endpoint authenticates a user with their username and password.
            Upon successful authentication, it returns a user ID that serves as the authentication token.
          </context>
          <prerequisites>
            - User must have an existing account (use register endpoint to create one)
            - Username and password are required
          </prerequisites>
          <usage>
            - Use the returned userId as a query parameter for subsequent API calls
            - Store the userId securely as it provides access to the user's data
            - Pass the userId as a query parameter in all authenticated requests
          </usage>
        responseFilterType: jq
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserCredentials"
            example:
              username: john_doe
              password: secure_password123
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
              example:
                userId: clh7x1234abcd5678efgh
        '400':
          description: Bad request - missing username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Missing username or password
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Invalid credentials
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
  "/api/register":
    post:
      summary: Register a new user
      description: Create a new user account with username and password
      operationId: user_register
      tags:
      - Authentication
      security: []
      x-gram:
        name: register_user
        description: |
          <context>
            This endpoint creates a new user account with a username and password.
            Upon successful registration, it returns a user ID that serves as the authentication token.
          </context>
          <prerequisites>
            - Username must be unique (3-50 characters)
            - Password must be secure (6-100 characters)
            - Username and password are required
          </prerequisites>
          <usage>
            - Use this to create new user accounts
            - The returned userId serves as the authentication token
            - Store the userId securely as it provides access to the user's data
            - Pass the userId as a query parameter in all authenticated requests
          </usage>
        responseFilterType: jq
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserCredentials"
            example:
              username: john_doe
              password: secure_password123
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
              example:
                userId: clh7x1234abcd5678efgh
        '400':
          description: Bad request - missing username or password
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Missing username or password
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: User already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              example:
                message: Internal server error
tags: []
